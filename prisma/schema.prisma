// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image String?
  hashedPassword  String?
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
}
model Account {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?  @db.String
  access_token         String?  @db.String
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?  @db.String
  session_state        String?

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  googleBookId String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  bookId    String   // ID from the Google Books API
  quantity  Int
  price     Float

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  googleBookId String
  quantity   Int
  price      Float
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}